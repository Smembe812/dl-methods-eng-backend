#!/usr/bin/env node

const fs = require('fs');
const models = require('../src/data-access');
// const moment = require('moment');

for (const model in models) {
  const tableName = models[model].tableName;

  let defaultValue = '';
  let onUpdate = '';
  let type = '';
  let template = `'use strict';
module.exports = {
  up: (queryInterface, Sequelize) => {
    return queryInterface.createTable('${tableName}', {\n`;

  const attributes = models[model].tableAttributes;

  for (const column in attributes) {
    delete attributes[column].Model;
    delete attributes[column].fieldName;
    delete attributes[column].field;
    delete attributes[column]._modelAttribute;

    template += `      ${column}: {\n`;

    if (attributes[column].defaultValue) {
      if ((attributes[column].defaultValue).toString() === 'NOW') {
        defaultValue = 'Sequelize.literal(\'CURRENT_TIMESTAMP\')';
      } else {
        defaultValue = (attributes[column].defaultValue).toString();
      }
    }

    if (attributes[column].onUpdate) {
      if ((attributes[column].onUpdate).toString() === 'NOW') {
        defaultValue = 'Sequelize.literal(\'CURRENT_TIMESTAMP\')';
        onUpdate = 'Sequelize.literal(\'CURRENT_TIMESTAMP\')';
      }
    }

    if (attributes[column].type) {
      let dataType = (attributes[column].type).toString();

      dataType = dataType.replace('DATETIME', 'DATE');
      dataType = dataType.replace('VARCHAR', 'STRING');
      dataType = dataType.replace('TIMESTAMP WITH TIME ZONE', 'DATE');
      dataType = dataType.split(' ').join('.');
      type = `Sequelize.${dataType}`;
    }

    for (const property in attributes[column]) {
      if (property.startsWith('_')) {
        delete attributes[column][property];
      }
      if (property === 'type') {
        template += `        type: ${type},\n`;
      } else if (property === 'defaultValue') {
        template += `        defaultValue: ${defaultValue},\n`;
      } else if (property === 'onUpdate') {
        template += `        defaultValue: ${defaultValue},\n`;
        template += `        onUpdate: ${onUpdate},\n`;
      } else {
        if (typeof attributes[column][property] === 'object') {
          template += `        ${property}: {\n`;
          for (const p in attributes[column][property]) {
            template += `          ${p}: '${attributes[column][property][p]}',\n`;
          }
          template += '        },\n';
        } else {
          if (attributes[column][property] === true || attributes[column][property] === false && property !== "_autoGenerated") {
              template += `        ${property}: ${attributes[column][property]},\n`;
            } else {
                if (property !== "_autoGenerated")
                    template += `        ${property}: '${attributes[column][property]}',\n`;
          }
        }
      }
    }
    template += '      },\n';
  }

  template += `    });
  },\n
  down: (queryInterface, Sequelize) => {
    return queryInterface.dropTable('${tableName}');
  },
};\n`;

  if (models[model].tableName !== undefined) {
    const now =new Date().toISOString().replace(/[^\d]/g,"").slice(0,-3);

    const files = fs.readdirSync(`${__dirname}/migrations/`)
        // create or update file if directory has files
        if (files.length > 0){
            const fileRelationNames = files.map(rel => rel.split("-")[2].split(".")[0])

            //update file if it exists
            if(fileRelationNames.includes(models[model].tableName)){
                files.forEach(file => {
                    const relation = file.split("-")[2].split(".")[0]
                    if (models[model].tableName === relation){
                        var buffer = fs.readFileSync(`${__dirname}/migrations/${file}`);
                        
                        // delete old file if it has an update then replace
                        if (!(buffer.toString() === template)){
                            fs.unlinkSync(`${__dirname}/migrations/${file}`);
                            fs.writeFileSync(`${__dirname}/migrations/${file}`, template);
                        }
                    }
                });
            }

            // create file if it does not exist in directory
            else{
                fs.writeFileSync(`${__dirname}/migrations/` + now + '-create-' + models[model].tableName + '.js', template);
            }

        }
        // create a file if no files exist in directory
        else{
            fs.writeFileSync(`${__dirname}/migrations/` + now + '-create-' + models[model].tableName + '.js', template);
        }

  }
};